// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: inscriptions.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addInscription = `-- name: AddInscription :one

INSERT INTO
    inscriptions (
        area, artifact_type, cisi_id, excavation_number, field_symbol, material_type, sequence_images, sequence_numbers, site, wells_id
    )
VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
    )
RETURNING
    id
`

type AddInscriptionParams struct {
	Area             sql.NullString
	ArtifactType     sql.NullString
	CisiID           sql.NullString
	ExcavationNumber sql.NullInt32
	FieldSymbol      sql.NullString
	MaterialType     sql.NullString
	SequenceImages   []string
	SequenceNumbers  []int32
	Site             sql.NullString
	WellsID          sql.NullString
}

// Active: 1705748378099@@127.0.0.1@5432@harrapa@public
func (q *Queries) AddInscription(ctx context.Context, arg AddInscriptionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addInscription,
		arg.Area,
		arg.ArtifactType,
		arg.CisiID,
		arg.ExcavationNumber,
		arg.FieldSymbol,
		arg.MaterialType,
		pq.Array(arg.SequenceImages),
		pq.Array(arg.SequenceNumbers),
		arg.Site,
		arg.WellsID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteInsciption = `-- name: DeleteInsciption :exec
DELETE FROM inscriptions WHERE id = $1
`

func (q *Queries) DeleteInsciption(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteInsciption, id)
	return err
}

const getAllInsciptions = `-- name: GetAllInsciptions :many
SELECT id, site, cisi_id, sequence_images, sequence_numbers, wells_id, artifact_type, material_type, field_symbol, excavation_number, area FROM inscriptions
`

func (q *Queries) GetAllInsciptions(ctx context.Context) ([]Inscription, error) {
	rows, err := q.db.QueryContext(ctx, getAllInsciptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inscription
	for rows.Next() {
		var i Inscription
		if err := rows.Scan(
			&i.ID,
			&i.Site,
			&i.CisiID,
			pq.Array(&i.SequenceImages),
			pq.Array(&i.SequenceNumbers),
			&i.WellsID,
			&i.ArtifactType,
			&i.MaterialType,
			&i.FieldSymbol,
			&i.ExcavationNumber,
			&i.Area,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInsciptionById = `-- name: GetInsciptionById :one
SELECT id, site, cisi_id, sequence_images, sequence_numbers, wells_id, artifact_type, material_type, field_symbol, excavation_number, area FROM inscriptions WHERE id = $1
`

func (q *Queries) GetInsciptionById(ctx context.Context, id uuid.UUID) (Inscription, error) {
	row := q.db.QueryRowContext(ctx, getInsciptionById, id)
	var i Inscription
	err := row.Scan(
		&i.ID,
		&i.Site,
		&i.CisiID,
		pq.Array(&i.SequenceImages),
		pq.Array(&i.SequenceNumbers),
		&i.WellsID,
		&i.ArtifactType,
		&i.MaterialType,
		&i.FieldSymbol,
		&i.ExcavationNumber,
		&i.Area,
	)
	return i, err
}
