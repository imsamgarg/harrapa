// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type UserRole string

const (
	UserRoleUser  UserRole = "user"
	UserRoleAdmin UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Inscription struct {
	ID               uuid.UUID
	Site             sql.NullString
	CisiID           sql.NullString
	SequenceImages   []string
	SequenceNumbers  []int32
	WellsID          sql.NullString
	ArtifactType     sql.NullString
	MaterialType     sql.NullString
	FieldSymbol      sql.NullString
	ExcavationNumber sql.NullInt32
	Area             sql.NullString
}

type User struct {
	ID             uuid.UUID
	Role           UserRole
	Name           string
	ProfilePicture sql.NullString
	Email          string
	Password       string
	CreatedAt      time.Time
	UpdatedAt      time.Time
}
